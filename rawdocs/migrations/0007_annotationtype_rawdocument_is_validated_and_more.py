# Generated by Django 5.2 on 2025-07-02 16:12

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("rawdocs", "0006_rawdocument_context_rawdocument_country_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="AnnotationType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "display_name",
                    models.CharField(help_text="Libellé affiché", max_length=100),
                ),
                (
                    "color",
                    models.CharField(
                        default="#3b82f6",
                        help_text="Couleur hexadécimale",
                        max_length=7,
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.AddField(
            model_name="rawdocument",
            name="is_validated",
            field=models.BooleanField(
                default=False, help_text="Document validé par un métadonneur"
            ),
        ),
        migrations.AddField(
            model_name="rawdocument",
            name="pages_extracted",
            field=models.BooleanField(
                default=False, help_text="Pages extraites individuellement"
            ),
        ),
        migrations.AddField(
            model_name="rawdocument",
            name="total_pages",
            field=models.IntegerField(default=0, help_text="Nombre total de pages"),
        ),
        migrations.AddField(
            model_name="rawdocument",
            name="url_source",
            field=models.URLField(blank=True, help_text="URL d'origine pour référence"),
        ),
        migrations.AddField(
            model_name="rawdocument",
            name="validated_at",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="metadatalog",
            name="document",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="logs",
                to="rawdocs.rawdocument",
            ),
        ),
        migrations.AlterField(
            model_name="rawdocument",
            name="country",
            field=models.CharField(
                blank=True, help_text="Pays détecté (GPE ou TLD)", max_length=100
            ),
        ),
        migrations.AlterField(
            model_name="rawdocument",
            name="doc_type",
            field=models.CharField(
                blank=True,
                help_text="Type du document (guide, rapport…)",
                max_length=100,
                verbose_name="Type",
            ),
        ),
        migrations.AlterField(
            model_name="rawdocument",
            name="language",
            field=models.CharField(
                blank=True, help_text="Langue détectée (fr, en…)", max_length=10
            ),
        ),
        migrations.AlterField(
            model_name="rawdocument",
            name="source",
            field=models.CharField(
                blank=True,
                help_text="Organisation émettrice (EMA, FDA…)",
                max_length=255,
            ),
        ),
        migrations.AlterField(
            model_name="rawdocument",
            name="url",
            field=models.URLField(blank=True, help_text="URL d'origine du PDF"),
        ),
        migrations.CreateModel(
            name="AnnotationSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("total_annotations", models.IntegerField(default=0)),
                ("pages_annotated", models.IntegerField(default=0)),
                ("ai_annotations", models.IntegerField(default=0)),
                ("manual_annotations", models.IntegerField(default=0)),
                ("started_at", models.DateTimeField(auto_now_add=True)),
                ("finished_at", models.DateTimeField(blank=True, null=True)),
                ("duration_minutes", models.IntegerField(default=0)),
                (
                    "annotator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annotation_sessions",
                        to="rawdocs.rawdocument",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="DocumentPage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "page_number",
                    models.IntegerField(help_text="Numéro de page (1-indexé)"),
                ),
                (
                    "raw_text",
                    models.TextField(help_text="Texte brut extrait de la page"),
                ),
                (
                    "cleaned_text",
                    models.TextField(help_text="Texte nettoyé pour annotation"),
                ),
                ("is_annotated", models.BooleanField(default=False)),
                ("annotated_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "annotated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="annotated_pages",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pages",
                        to="rawdocs.rawdocument",
                    ),
                ),
            ],
            options={
                "ordering": ["page_number"],
                "unique_together": {("document", "page_number")},
            },
        ),
        migrations.CreateModel(
            name="Annotation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "start_pos",
                    models.IntegerField(help_text="Position de début dans le texte"),
                ),
                (
                    "end_pos",
                    models.IntegerField(help_text="Position de fin dans le texte"),
                ),
                (
                    "selected_text",
                    models.CharField(help_text="Texte sélectionné", max_length=500),
                ),
                (
                    "confidence_score",
                    models.FloatField(default=0.0, help_text="Score IA (0.0–1.0)"),
                ),
                (
                    "ai_reasoning",
                    models.TextField(
                        blank=True, help_text="Raisonnement IA pour cette annotation"
                    ),
                ),
                ("is_validated", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="created_annotations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "validated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="validated_annotations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "annotation_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="rawdocs.annotationtype",
                    ),
                ),
                (
                    "page",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="annotations",
                        to="rawdocs.documentpage",
                    ),
                ),
            ],
            options={
                "ordering": ["start_pos"],
            },
        ),
    ]
